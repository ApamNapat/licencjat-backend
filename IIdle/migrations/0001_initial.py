# Generated by Django 3.1 on 2020-08-20 14:13

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Abilities',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ability', models.CharField(choices=[('Logic', 'Logic'), ('Basic Calculus', 'Basic Calculus'), ('Intermediate Calculus', 'Intermediate Calculus'), ('Algebra', 'Algebra'), ('Basic Discrete Math', 'Basic Discrete Math'), ('Intermediate Discrete Math', 'Intermediate Discrete Math'), ('Probability', 'Probability'), ('Lambda Calculus', 'Lambda Calculus'), ('JFIZO', 'JFIZO'), ('Structured Programming', 'Structured Programming'), ('Object Oriented Programming', 'Object Oriented Programming'), ('Functional Programming', 'Functional Programming'), ('C++ Programming', 'C++ Programming'), ('C Programming', 'C Programming'), ('Java Programming', 'Java Programming'), ('Python Programming', 'Python Programming'), ('Scala Programming', 'Scala Programming'), ('Rust Programming', 'Rust Programming'), ('Embedded Programming', 'Embedded Programming'), ('Basic Algorithms', 'Basic Algorithms'), ('Graph Algorithms', 'Graph Algorithms'), ('Dynamic Programming', 'Dynamic Programming'), ('Greedy Algorithms', 'Greedy Algorithms'), ('Basic Data Structures', 'Basic Data Structures'), ('Intermediate Data Structures', 'Intermediate Data Structures'), ('Basic Numerical Analysis', 'Basic Numerical Analysis'), ('Intermediate Numerical Analysis', 'Intermediate Numerical Analysis'), ('Databases', 'Databases'), ('Computer Networks', 'Computer Networks'), ('Operating Systems', 'Operating Systems'), ('Computer Architecture', 'Computer Architecture'), ('Linux Basics', 'Linux Basics'), ('Linux Administration', 'Linux Administration'), ('Software Engineering', 'Software Engineering'), ('Machine Learning', 'Machine Learning'), ('Artificial Intelligence', 'Artificial Intelligence')], max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='ClassesTaken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course', models.CharField(choices=[('Logic', 'Logic'), ('Calculus I', 'Calculus I'), ('Intro To Programming - Python', 'Intro To Programming - Python'), ('Intro To Programming - C', 'Intro To Programming - C'), ('Introduction To Computer Science', 'Introduction To Computer Science'), ('Programming', 'Programming'), ('Algebra', 'Algebra'), ('C++ Programming', 'C++ Programming'), ('Object Oriented Programming', 'Object Oriented Programming'), ('Computer Systems Architectures', 'Computer Systems Architectures'), ('Numerical Analysis', 'Numerical Analysis'), ('Discrete Math', 'Discrete Math'), ('Probability', 'Probability'), ('Java Programming', 'Java Programming'), ('Python Programming', 'Python Programming'), ('Functional Programming', 'Functional Programming'), ('Algorithms And Data Structures', 'Algorithms And Data Structures'), ('Linux Administration', 'Linux Administration'), ('Scala Programming', 'Scala Programming'), ('Lambda Calculus', 'Lambda Calculus'), ('Calculus II', 'Calculus II'), ('Operating Systems', 'Operating Systems'), ('Rust Programming', 'Rust Programming'), ('Software Engineering', 'Software Engineering'), ('Machine Learning', 'Machine Learning'), ('Embedded Systems', 'Embedded Systems'), ('Databases', 'Databases'), ('Computer Networks', 'Computer Networks'), ('JFIZO', 'JFIZO'), ('Artificial Intelligence', 'Artificial Intelligence')], max_length=50)),
                ('times_present', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='CompletedCourses',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course', models.CharField(choices=[('Logic', 'Logic'), ('Calculus I', 'Calculus I'), ('Intro To Programming - Python', 'Intro To Programming - Python'), ('Intro To Programming - C', 'Intro To Programming - C'), ('Introduction To Computer Science', 'Introduction To Computer Science'), ('Programming', 'Programming'), ('Algebra', 'Algebra'), ('C++ Programming', 'C++ Programming'), ('Object Oriented Programming', 'Object Oriented Programming'), ('Computer Systems Architectures', 'Computer Systems Architectures'), ('Numerical Analysis', 'Numerical Analysis'), ('Discrete Math', 'Discrete Math'), ('Probability', 'Probability'), ('Java Programming', 'Java Programming'), ('Python Programming', 'Python Programming'), ('Functional Programming', 'Functional Programming'), ('Algorithms And Data Structures', 'Algorithms And Data Structures'), ('Linux Administration', 'Linux Administration'), ('Scala Programming', 'Scala Programming'), ('Lambda Calculus', 'Lambda Calculus'), ('Calculus II', 'Calculus II'), ('Operating Systems', 'Operating Systems'), ('Rust Programming', 'Rust Programming'), ('Software Engineering', 'Software Engineering'), ('Machine Learning', 'Machine Learning'), ('Embedded Systems', 'Embedded Systems'), ('Databases', 'Databases'), ('Computer Networks', 'Computer Networks'), ('JFIZO', 'JFIZO'), ('Artificial Intelligence', 'Artificial Intelligence')], max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('time', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['time'],
            },
        ),
        migrations.CreateModel(
            name='Timetable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('Sleep', 'Sleep'), ('Work', 'Work'), ('Learn Math', 'Learn Math'), ('Learn Programming', 'Learn Programming'), ('Learn Algorithms', 'Learn Algorithms'), ('Relax', 'Relax'), ('Party', 'Party'), ('Finish Semester', 'Finish Semester'), ('End Day', 'End Day'), ('Logic', 'Logic'), ('Calculus I', 'Calculus I'), ('Intro To Programming - Python', 'Intro To Programming - Python'), ('Intro To Programming - C', 'Intro To Programming - C'), ('Introduction To Computer Science', 'Introduction To Computer Science'), ('Programming', 'Programming'), ('Algebra', 'Algebra'), ('C++ Programming', 'C++ Programming'), ('Object Oriented Programming', 'Object Oriented Programming'), ('Computer Systems Architectures', 'Computer Systems Architectures'), ('Numerical Analysis', 'Numerical Analysis'), ('Discrete Math', 'Discrete Math'), ('Probability', 'Probability'), ('Java Programming', 'Java Programming'), ('Python Programming', 'Python Programming'), ('Functional Programming', 'Functional Programming'), ('Algorithms And Data Structures', 'Algorithms And Data Structures'), ('Linux Administration', 'Linux Administration'), ('Scala Programming', 'Scala Programming'), ('Lambda Calculus', 'Lambda Calculus'), ('Calculus II', 'Calculus II'), ('Operating Systems', 'Operating Systems'), ('Rust Programming', 'Rust Programming'), ('Software Engineering', 'Software Engineering'), ('Machine Learning', 'Machine Learning'), ('Embedded Systems', 'Embedded Systems'), ('Databases', 'Databases'), ('Computer Networks', 'Computer Networks'), ('JFIZO', 'JFIZO'), ('Artificial Intelligence', 'Artificial Intelligence')], max_length=50)),
                ('time', models.DateTimeField()),
            ],
            options={
                'ordering': ['time'],
            },
        ),
        migrations.CreateModel(
            name='UserData',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='data', serialize=False, to='auth.user')),
                ('cash', models.DecimalField(decimal_places=2, default=500, max_digits=10)),
                ('energy', models.DecimalField(decimal_places=2, default=50, max_digits=5)),
                ('mood', models.DecimalField(decimal_places=2, default=50, max_digits=5)),
                ('semester', models.IntegerField(default=1)),
                ('failed_last_semester', models.BooleanField(default=False)),
                ('math', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('programming', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('algorithms', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('work_experience', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
            ],
        ),
        migrations.AddConstraint(
            model_name='userdata',
            constraint=models.CheckConstraint(check=models.Q(('energy__gte', 0), ('energy__lte', 100)), name='energy_range'),
        ),
        migrations.AddConstraint(
            model_name='userdata',
            constraint=models.CheckConstraint(check=models.Q(('mood__gte', 0), ('mood__lte', 100)), name='mood_range'),
        ),
        migrations.AddConstraint(
            model_name='userdata',
            constraint=models.CheckConstraint(check=models.Q(('semester__gte', 1), ('semester__lte', 6)), name='semester_range'),
        ),
        migrations.AddConstraint(
            model_name='userdata',
            constraint=models.CheckConstraint(check=models.Q(('math__gte', 0), ('math__lte', 100)), name='math_range'),
        ),
        migrations.AddConstraint(
            model_name='userdata',
            constraint=models.CheckConstraint(check=models.Q(('programming__gte', 0), ('programming__lte', 100)), name='programming_range'),
        ),
        migrations.AddConstraint(
            model_name='userdata',
            constraint=models.CheckConstraint(check=models.Q(('algorithms__gte', 0), ('algorithms__lte', 100)), name='algorithms_range'),
        ),
        migrations.AddConstraint(
            model_name='userdata',
            constraint=models.CheckConstraint(check=models.Q(('work_experience__gte', 0), ('work_experience__lte', 100)), name='work_experience_range'),
        ),
        migrations.AddField(
            model_name='timetable',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='message',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='completedcourses',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='classestaken',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='abilities',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='completedcourses',
            unique_together={('user', 'course')},
        ),
        migrations.AlterUniqueTogether(
            name='classestaken',
            unique_together={('user', 'course')},
        ),
        migrations.AlterUniqueTogether(
            name='abilities',
            unique_together={('user', 'ability')},
        ),
    ]
